(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{466:function(n,s,a){"use strict";a.r(s);var r=a(25),t=Object(r.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"sonarqube"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sonarqube"}},[n._v("#")]),n._v(" sonarQube")]),n._v(" "),s("blockquote",[s("p",[n._v("opendevops平台所用插件SonarQube部署文档， 部分文档会因为版本迭代不可用，此文档只作为参考文档，谢谢。")])]),n._v(" "),s("p",[s("a",{attrs:{href:"https://www.sonarqube.org/",target:"_blank",rel:"noopener noreferrer"}},[n._v("官网"),s("OutboundLink")],1)]),n._v(" "),s("p",[s("strong",[n._v("简介")])]),n._v(" "),s("blockquote",[s("p",[n._v("SonarQube 是一个开源的代码分析平台, 用来持续分析和评测项目源代码的质量。 通过SonarQube我们可以检测出项目中重复代码， 潜在bug， 代码风格问题，缺乏单元测试等问题， 并通过一个web ui展示出来。")])]),n._v(" "),s("p",[s("strong",[n._v("基础的架构")])]),n._v(" "),s("ul",[s("li",[n._v("Database")]),n._v(" "),s("li",[n._v("SonarQube Server")]),n._v(" "),s("li",[n._v("SonarQube Scanner")]),n._v(" "),s("li",[n._v("Project")]),n._v(" "),s("li",[n._v("Nginx （如果不需要通过nginx转发则不需要Nginx模块）")])]),n._v(" "),s("p",[s("strong",[n._v("SonarQube服务端")])]),n._v(" "),s("p",[n._v("直接拉取仓库中的docker镜像启动服务, docker、docker-compose安装参考"),s("a",{attrs:{href:"https://github.com/opendevops-cn/opendevops/tree/master/scripts",target:"_blank",rel:"noopener noreferrer"}},[n._v("初始化脚本"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[n._v("mkdir")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[n._v("-p")]),n._v(" /data/sonarqube/\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("cat")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v(">")]),n._v("/data/sonarqube/docker-compose.yml "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<<")]),s("span",{pre:!0,attrs:{class:"token string"}},[n._v('EOF\nversion: "2"\n\nservices:\n  sonarqube:\n    image: ss1917/sonarqube:latest\n    ports:\n      - "9000:9000"\n    networks:\n      - sonarnet\n    environment:\n      - SONARQUBE_JDBC_URL=jdbc:postgresql://db:5432/sonar\n    volumes:\n      - /data/sonarqube/conf:/opt/sonarqube/conf\n      - /data/sonarqube/data:/opt/sonarqube/data\n      - /data/sonarqube/extensions:/opt/sonarqube/extensions\n      - /data/sonarqube/bundled-plugins:/opt/sonarqube/lib/bundled-plugins\n\n  db:\n    image: postgres\n    networks:\n      - sonarnet\n    environment:\n      - POSTGRES_USER=sonar\n      - POSTGRES_PASSWORD=sonar\n    volumes:\n      - postgresql:/var/lib/postgresql\n      - postgresql_data:/var/lib/postgresql/data\n\nnetworks:\n  sonarnet:\n    driver: bridge\n\nvolumes:\n  postgresql:\n  postgresql_data:\nEOF')]),n._v("\n\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[n._v("cd")]),n._v(" /data/sonarqube\n"),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("docker-compose")]),n._v(" up "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[n._v("-d")]),n._v("\n\n")])])]),s("p",[n._v("启动docker后访问ip:9000，代表服务已启动,默认登录密码admin/admin")]),n._v(" "),s("p",[s("img",{attrs:{src:"/login_sonar.png",alt:"login_sonar"}})]),n._v(" "),s("p",[n._v("SonarQube配置安装插件，汉化。")]),n._v(" "),s("p",[s("img",{attrs:{src:"/chinese_plug.png",alt:"chinese_plug"}}),n._v(" "),s("img",{attrs:{src:"/sonarp_plug.png",alt:"sonarp_plug"}})]),n._v(" "),s("p",[n._v("如图进入marketplace，搜索汉化包,各类语言代码扫描依赖包， 安装完毕后自动重启。")]),n._v(" "),s("p",[s("img",{attrs:{src:"/sonar_reboot.png",alt:"sonar_reboot"}})]),n._v(" "),s("p",[n._v("接下来开始配置sonarqube服务全局配置。")]),n._v(" "),s("p",[s("img",{attrs:{src:"/sonar_global.png",alt:"sonar_global"}})]),n._v(" "),s("p",[s("strong",[n._v("主要配置项：")])]),n._v(" "),s("ul",[s("li",[n._v("Server base URL (定义sonar服务访问地址，可用域名或ip)")]),n._v(" "),s("li",[n._v("Email prefix (发送邮件时的主题前缀)")]),n._v(" "),s("li",[n._v("From address")]),n._v(" "),s("li",[n._v("From name")]),n._v(" "),s("li",[n._v("Secure connection")])]),n._v(" "),s("p",[s("strong",[n._v("smtp安全协议")])]),n._v(" "),s("ul",[s("li",[n._v("SMTP host")]),n._v(" "),s("li",[n._v("SMTP password")]),n._v(" "),s("li",[n._v("SMTP port")])]),n._v(" "),s("p",[n._v("配置完成后测试发送")]),n._v(" "),s("p",[s("img",{attrs:{src:"/send_test.png",alt:"send_test"}})]),n._v(" "),s("p",[s("strong",[n._v("配置邮件提醒")])]),n._v(" "),s("p",[n._v("在 我的账号-提醒 下设置邮件提醒，也可针对特定项目设置提醒，发送邮件。")]),n._v(" "),s("p",[s("img",{attrs:{src:"/sonar_mail01.png",alt:"sonar_mail01"}}),n._v(" "),s("img",{attrs:{src:"/sonar_mail02.png",alt:"sonar_mail02"}})]),n._v(" "),s("p",[n._v("至此sonarqube服务端安装配置全部已完成。")]),n._v(" "),s("p",[s("strong",[n._v("SonarQube客户端(必装)")])]),n._v(" "),s("blockquote",[s("p",[n._v("配置好sonar的服务端之后，接下来就要使用sonar检测我们的代码了，sonar主要是借助客户端检测工具来检测代码，所以要使用sonar必须要在我们本地配置好客户端检测工具\n客户端可以通过IDE插件、Sonar-Scanner插件、Ant插件和Maven插件方式进行扫描分析，此处使用的是Sonar-Scanner,sonar的命令行分析端软件还有Sonar-Runner,和Scanner使用差不多")])]),n._v(" "),s("p",[s("strong",[n._v("此处我们使用sonar-scanner")])]),n._v(" "),s("p",[s("code",[n._v("注意：这里客户端后续代码检查脚本会调用此客户端执行代码检查")])]),n._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[n._v("wget")]),n._v(" https://sonarsource.bintray.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.2.0.1227-linux.zip\n"),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("unzip")]),n._v("  sonar-scanner-cli-3.2.0.1227-linux.zip\n"),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("mv")]),n._v(" sonar-scanner-3.2.0.1227-linux/ /usr/local/sonar-scanner\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[n._v("export")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[n._v("SONAR_RUNNER_HOME")]),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v("/usr/local/sonar-scanner\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[n._v("export")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s("span",{pre:!0,attrs:{class:"token environment constant"}},[n._v("PATH")])]),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[n._v("$SONAR_RUNNER_HOME")]),n._v("/bin:"),s("span",{pre:!0,attrs:{class:"token environment constant"}},[n._v("$PATH")]),n._v("\n")])])])])}),[],!1,null,null,null);s.default=t.exports}}]);